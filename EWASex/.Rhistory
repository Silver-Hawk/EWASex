roxygen2::roxygenise()
roxygen2::roxygenise()
library("GEOquery")
library("minfi")
library("EWASex")
# Change the working directory to the directory of your choice
setwd("C:/Users/Lund/Downloads")
# For this tutorial we will use the smaller GSE68777 blood-based 450K dataset (N=40)
# The dataset consists of 14 males and 26 females,
# Of which, 20 were hospitalized with acute mania and 20 are controls
GEO_ID = "GSE68777"
# download
supp = GEOquery::getGEOSuppFiles(GEO_ID)
GSE = getGEO(GEO_ID)
# unzipping
untar(tarfile = paste0(GEO_ID,"/",GEO_ID,"_RAW.tar"), exdir = GEO_ID)
idat_files <- list.files(pattern = 'idat.gz', path = GEO_ID)
for(i in 1:length(idat_files)){
gunzip(filename = paste(GEO_ID,idat_files[i],sep="/"), destname = paste(GEO_ID,gsub("[.]gz$", "", idat_files[i]),sep="/"), overwrite = T)
}
# get annotation file
anno = pData(GSE[[1]])
# get beta-values without applaying normalization
RGset <- read.metharray.exp(paste0('./',GEO_ID,'/'), force = T)
MSet <- preprocessRaw(RGset)
BetaMatrix <- getBeta(MSet, type = 'Illumina')
#
# Do prediction using EWASex
#
data("MeansAndSD49")
# Use beta matrix
df <- BetaMatrix
# Subset to only use the 49 best CpGs
df <- df[rownames(df) %in% getGoldCpGNames(),]
# Do prediction
preds <- getPredictions(df = df, means = MeansAndSD49, margin = 1)
# Get a vector with names matching those of the EWASex prediction
sex_col = ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
EWASex.train <- function(genders, df, margin=2) {
keys_ = unique(genders)
if(margin==1)
df = t(df)
MEANs = data.frame(lapply(rownames(df), function(CpG) {
tapply(df[CpG,], genders, mean, simplify = T)
}))
names(MEANs) <- rownames(df)
SDs = data.frame(lapply(rownames(df), function(CpG) {
tapply(df[CpG,], genders, sd, simplify = T)
}))
names(SDs) <- rownames(df)
df_ = list()
df_[[keys_[1]]] = list(mean=unlist(MEANs[keys_[1],]), sd=unlist(SDs[keys_[1],]))
df_[[keys_[2]]] = list(mean=unlist(MEANs[keys_[2],]), sd=unlist(SDs[keys_[2],]))
return(df_)
}
preds <- getPredictions(df = df, means = EWASex.train(anno$`Sex:ch1`, df), margin = 1)
preds
# Get a vector with names matching those of the EWASex prediction
sex_col = ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
sex_col = anno$`Sex:ch1`#ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
EWASex.predict <- function(df, means, margin=2, use_normalized=TRUE) {
if (margin == 1) {
df = t(df)
}
# so far, the script only supports two genders
keys_ = names(means)
E1 <- data.frame(gender=keys_[1], cpg=colnames(df), mean=means[[keys_[1]]][['mean']], sd=means[[keys_[1]]][['sd']])
E2 <- data.frame(gender=keys_[2], cpg=colnames(df), mean=means[[keys_[2]]][['mean']], sd=means[[keys_[2]]][['sd']])
E1testVals <- abs(df - E1$mean) / E1$sd
E1test <- rowSums(E1testVals) / ncol(df)
E2testVals <- abs(df - E2$mean) / E2$sd
E2test <- rowSums(E2testVals) / ncol(df)
returnFrame <- data.frame(Error1=E1test,
Error2=E2test,
NormError1=E1test/max(E1test),
NormError2=E2test/max(E2test))
if(use_normalized)
returnFrame$predictedGender <- ifelse(returnFrame$NormError1 < returnFrame$NormError2, keys_[1], keys_[2])
else
returnFrame$predictedGender <- ifelse(returnFrame$Error1 < returnFrame$Error2, keys_[1], keys_[2])
return (returnFrame)
}
preds <- EWASex.predict(df = df, means = EWASex.train(anno$`Sex:ch1`, df), margin = 1)
preds
sex_col = anno$`Sex:ch1`#ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
devtools::build()
setwd("~/GitHub/EWASex")
setwd("~/GitHub/EWASex")
devtools::build()
setwd("~/GitHub/EWASex/EWASex")
devtools::build()
roxygen2::roxygenise()
preds <- EWASex.predict(df = df, means = EWASex.train(anno$`Sex:ch1`, df), margin = 1)
preds
?EWASex.predict
library("EWASex")
EWASex.predict
EWASex.train
devtools::build()
install.packages("C:/Users/Lund/Documents/GitHub/EWASex/EWASex_0.1.0.tar.gz", repos=NULL)
library("EWASex")
rm(EWASex.predict())
rm(EWASex.predict)
rm(EWASex.train)
library("EWASex")
?EWASex.predict
?EWASex.train
roxygen2::roxygenise()
head(preds)
head(preds, 10)
roxygen2::roxygenise()
roxygen2::vignette_roclet()
devtools::build_vignettes()
devtools::build_vignettes()
write.csv(preds, file = "C:/Users/Lund/Desktop/prds.csv")
data("MeansAndSD49")
# Use beta matrix
df <- BetaMatrix
# Subset to only use the 49 best CpGs
df <- df[rownames(df) %in% getGoldCpGNames(),]
# Do prediction
preds <- getPredictions(df = df, means = MeansAndSD49, margin = 1)
# Get a vector with names matching those of the EWASex prediction
sex_col = ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
data("MeansAndSD49")
# Use beta matrix
df <- BetaMatrix
# Subset to only use the 49 best CpGs
df <- df[rownames(df) %in% getGoldCpGNames(),]
# Do prediction
preds <- EWASex.predict(df = df, means = MeansAndSD49, margin = 1)
# Get a vector with names matching those of the EWASex prediction
sex_col = ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
# Use beta matrix
df <- BetaMatrix
# Subset to only use the 49 best CpGs
df <- df[rownames(df) %in% EWASex.getGoldCpGNames(),]
# Do prediction
preds <- EWASex.predict(df = df, means = MeansAndSD49, margin = 1)
# Get a vector with names matching those of the EWASex prediction
sex_col = ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
preds$sex = anno$`Sex:ch1`
write.csv(preds, file = "C:/Users/Lund/Desktop/prds.csv")
write.csv(preds, file = "C:/Users/Lund/Desktop/prds.csv")
# Use beta matrix
df <- BetaMatrix
# Subset to only use the 49 best CpGs
df <- df[rownames(df) %in% EWASex.getGoldCpGNames(),]
# Do prediction
preds <- EWASex.predict(df = df, means = MeansAndSD49, margin = 1)
# Get a vector with names matching those of the EWASex prediction
sex_col = ifelse(anno$`Sex:ch1` == "Female", "female", "male")
# Get the accuracy/fraction of correct predictions
accuracy = sum(preds$predictedGender == sex_col) / nrow(anno)
# print the percentage of correctly predicted genders
print(paste0(accuracy*100, "% of the samples were correctly predicted by EWASex."))
write.csv(preds, file = "C:/Users/Lund/Desktop/prds.csv")
preds
preds$sex = sex_col
preds
preds
write.csv(preds, file = "C:/Users/Lund/Desktop/prds.csv")
write.csv(preds, file = "C:/Users/Lund/Desktop/prds.csv")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
#### DELETE
means = EWASex.train(sex_col, df)
#### DELETE
library("EWASex")
means = EWASex.train(sex_col, df)
keys_ = names(means)
keys_
E1 <- data.frame(gender=keys_[1], cpg=colnames(df), mean=means[[keys_[1]]][['mean']], sd=means[[keys_[1]]][['sd']])
E1testVals <- abs(df - E1$mean) / E1$sd
E1test <- rowSums(E1testVals) / ncol(df)
E1 <- data.frame(gender=keys_[1], cpg=colnames(df), mean=means[[keys_[1]]][['mean']], sd=means[[keys_[1]]][['sd']])
colnames(df)
df_ = t(df)
E1 <- data.frame(gender=keys_[1], cpg=colnames(df_), mean=means[[keys_[1]]][['mean']], sd=means[[keys_[1]]][['sd']])
E1testVals <- abs(df_ - E1$mean) / E1$sd
E1test <- rowSums(E1testVals) / ncol(df_)
E1test
keys_
keys_[1]
sex_col
devtools::build_vignettes()
